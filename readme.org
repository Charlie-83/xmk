# Copyright 2022 Manna Harbour
# https://github.com/manna-harbour/xmk

# M-x org-make-toc to update TOC
# https://github.com/alphapapa/org-make-toc

* [[https://github.com/manna-harbour/xmk][𝑥MK]]
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

[[docs/images/xmk-banner.jpg]]

Use programmable keyboard firmware with any keyboard.

:CONTENTS:
- [[#overview][Overview]]
- [[#xmk][xmk]]
- [[#maps][Maps]]
- [[#firmware][Firmware]]
- [[#related-projects][Related Projects]]
- [[#discussions-and-support][Discussions and Support]]
:END:

** Overview

[[#xmk][xmk]] exclusively receives key events from the keyboard, translates keycodes into keymap key positions according to a [[#maps][map]], and outputs firmware shell commands. The [[#firmware][firmware]] reads the shell commands and triggers key events in the keymap. For background see [[#related-projects][Related Projects]], and for help see [[#discussions-and-support][Discussions and Support]].

** xmk
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:

~xmk~ is located at [[./src/xmk]].

:CONTENTS:
- [[#xmk-prerequisites][xmk Prerequisites]]
- [[#xmk-setup][xmk Setup]]
- [[#xmk-usage][xmk Usage]]
:END:

*** xmk Prerequisites

- https://github.com/gvalkov/python-evdev

*** xmk Setup
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:
:CONTENTS:
- [[#add-account-to-input-group][Add Account to input Group]]
- [[#find-the-keyboard-device][Find the Keyboard Device]]
- [[#select-the-keyboard][Select the Keyboard]]
- [[#create-a-map][Create a Map]]
- [[#select-the-map][Select the Map]]
:END:

**** Add Account to input Group

Add your account to the ~input~ group.

#+BEGIN_SRC sh
sudo usermod -aG input `whoami`
#+END_SRC

Login again.

**** Find the Keyboard Device

Find the device for your keyboard under ~/dev/input~.

First look under ~/dev/input/by-id/~. It will usually end in ~event-kbd~.

#+BEGIN_SRC sh
ls /dev/input/by-id/*
#+END_SRC

Note the keyboard device in the output.

#+BEGIN_EXAMPLE
/dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd
#+END_EXAMPLE

If not listed, find the device with ~evtest~.

#+BEGIN_SRC sh
evtest
#+END_SRC

Note the keyboard device in the output.

#+BEGIN_EXAMPLE
/dev/input/event21:	SIGMACHIP USB Keyboard
#+END_EXAMPLE

**** Select the Keyboard

The ~-k~ option is used to select the keyboard. Give the path to the keyboard device from [[#find-the-keyboard-device][Find the Keyboard Device]].

#+BEGIN_SRC sh
./src/xmk -k /dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd -m ./src/maps/minidox/60_ansi -s > /dev/ttyACM0
#+END_SRC

#+BEGIN_SRC sh
./src/xmk -k /dev/input/event21 -m ./src/maps/minidox/60_ansi -s > /dev/ttyACM0
#+END_SRC

**** Create a Map

The ~-c~ option is used to create a map. Give the path to the map file to be created. Also [[#select-the-keyboard][select the keyboard]].

#+BEGIN_SRC sh
./src/xmk -k /dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd -c ./src/maps/minidox/60_ansi
#+END_SRC

Press each key to be used in the keymap in order of keymap key position. Press a key a second time to insert a line break. Press a third time to exit. Optionally edit the file to reformat whitespace or add comments with ~#~.

**** Select the Map

The ~-m~ option is used to select a map. Give the path to the map file. Use one of the included [[#maps][maps]], or first [[#create-a-map][create a map]].

#+BEGIN_SRC sh
./src/xmk -k /dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd -m ./src/maps/minidox/tap -s > /dev/ttyACM0
#+END_SRC

*** xmk Usage
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:

:CONTENTS:
- [[#typing][Typing]]
- [[#record][Record]]
- [[#playback][Playback]]
:END:

**** Typing

The ~-s~ option is used to output firmware shell commands. Redirect output to the tty or pty device from [[#converterxmk-setup][converter/xmk Setup]], [[#xmk-shield-setup][xmk Shield Setup]], or [[#native_posix_64-board-setup][native_posix_64 Board Setup]], as appropriate. Also [[#select-the-keyboard][select the keyboard]] and [[#select-the-map][select the map]].

#+BEGIN_SRC sh
./src/xmk -k /dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd -m ./src/maps/minidox/60_ansi -s > /dev/ttyACM0
#+END_SRC

**** Record

The ~-r~ option is used to record keystrokes with timing. Give the path to the recording file to be created. Optionally redirect output as when [[#typing][typing]]. Also [[#select-the-keyboard][select the keyboard]] and [[#select-the-map][select the map]].

#+BEGIN_SRC sh
./src/xmk -k /dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd -m ./src/maps/minidox/60_ansi -r ./src/recordings/hello_world > /dev/ttyACM0
#+END_SRC

**** Playback

The ~-p~ option is used to read recorded keystrokes with timing and output firmware shell commands. Give the path to the recording file. Redirect output as when [[#typing][typing]].

#+BEGIN_SRC sh
./src/xmk -p ./src/recordings/hello_world > /dev/ttyACM0
#+END_SRC

** Maps
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:

Map of keyboard keys to keymap key positions.

Sample maps are included under [[./src/maps]] by keymap layout.

:CONTENTS:
- [[#minidox][minidox]]
:END:

*** minidox
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:
:CONTENTS:
- [[#60_ansi][60_ansi]]
- [[#60_ansi-noreverseangle][60_ansi-noreverseangle]]
- [[#kinesis_advantage][kinesis_advantage]]
- [[#tap][tap]]
:END:

**** 60_ansi

[[https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/mapping/miryoku-kle-mapping-60_ansi.png]]

**** 60_ansi-noreverseangle

[[https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/mapping/miryoku-kle-mapping-60_ansi-noreverseangle.png]]

**** kinesis_advantage

[[https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/mapping/miryoku-kle-mapping-kinesis_advantage.png]]

**** tap

Corresponds to the default [[https://github.com/manna-harbour/miryoku/tree/master/docs/reference#additional-features][Miryoku Tap layer]].

** Firmware
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:
:CONTENTS:
- [[#qmk][QMK]]
- [[#zmk][ZMK]]
:END:

*** QMK
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:

A bare QMK-compatible MCU board connected to the host over USB, running QMK built with the ~converter/xmk~ keyboard definition. USB HID is over USB. Communication from ~xmk~ to QMK is over USB CDC ACM UART.

:CONTENTS:
- [[#converterxmk-prerequisites][converter/xmk Prerequisites]]
- [[#converterxmk-setup][converter/xmk Setup]]
:END:

**** converter/xmk Prerequisites

- A [[https://github.com/qmk/qmk_firmware/blob/master/docs/compatible_microcontrollers.md][QMK-compatible]] MCU board.

**** converter/xmk Setup

The ~converter/xmk~ keyboard definition is a available at [[https://github.com/manna-harbour/qmk_firmware/tree/xmk/keyboards/converter/xmk]].

Add your keymap. If it is not using one of the supported layouts, also edit ~info.json~ to add a new entry under ~layouts~, ensuring the ~matrix~ entries are in order and without gaps. If adding support for a community layout, also append to ~community_layouts~.

For local builds, build with keyboard ~converter/xmk~.

For workflow builds, fork this repo. Edit [[./.github/workflows/build-converter-xmk.yml]] to modify the values for ~repository~ and ~ref~ in the ~qmk~ step for the QMK fork containing your keymap. Run the ~Build converter/xmk~ workflow.

Connect the MCU board to USB, enter the bootloader (e.g. for [[https://learn.sparkfun.com/tutorials/pro-micro--fio-v3-hookup-guide/troubleshooting-and-faq#ts-reset][Pro-Micro]]), and flash the firmware.

Reconnect the MCU board and find the tty device.

#+BEGIN_SRC sh
sudo dmesg | grep tty
#+END_SRC

Note the tty device in the output.
#+BEGIN_EXAMPLE
cdc_acm 1-3.4.4:1.0: ttyACM0: USB ACM device
#+END_EXAMPLE

When using ~xmk~ for [[#typing][typing]], redirect output to the tty device from the previous step.

#+BEGIN_SRC sh
./src/xmk -k /dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd -m ./src/maps/minidox/60_ansi -s > /dev/ttyACM0
#+END_SRC

To enter the bootloader after flashing the firmware, ~xmk~ can be used to trigger a ~QK_BOOT~ keycode if present in the keymap, or enter the ~boot~ command in the ~converter/xmk~ shell e.g. ~echo "boot" > /dev/ttyACM0~.

*** ZMK
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:

Two different methods of operation are supported.

:CONTENTS:
- [[#xmk-shield][xmk Shield]]
- [[#native_posix_64-board][native_posix_64 Board]]
:END:

**** xmk Shield
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:

A bare ZMK-compatible MCU board connected to the host over USB, running ZMK built with the ~xmk~ shield definition.  USB HID is over USB. Communication from ~xmk~ to ZMK is over USB CDC ACM UART.

:CONTENTS:
- [[#xmk-shield-prerequisites][xmk Shield Prerequisites]]
- [[#xmk-shield-setup][xmk Shield Setup]]
:END:

***** xmk Shield Prerequisites

- A [[https://zmk.dev/docs/hardware][ZMK-compatible]] MCU board.

***** xmk Shield Setup

Edit [[./zmk-config/xmk.keymap]] to add your keymap. No transform is required.

For local builds, merge https://github.com/zmkfirmware/zmk/pull/1318, ~west update~, and build with shield ~xmk~ and the appropriate board for your MCU board, using the path to [[./zmk-config]] for [[https://zmk.dev/docs/development/build-flash#building-from-zmk-config-folder][ZMK_CONFIG]].

For workflow builds, fork this repo. Edit [[./zmk-config/build-xmk-shield.yml]] to adjust the value for ~board~ for your MCU board. Run the ~Build xmk shield~ workflow.

Connect the MCU board to USB, enter the bootloader (e.g. for [[https://nicekeyboards.com/docs/nice-nano/getting-started#flashing-firmware-and-bootloaders][nice!nano]] or [[https://wiki.seeedstudio.com/Seeeduino-XIAO/#enter-bootloader-mode][Seeeduino XIAO]]), and flash the firmware.

Reconnect the MCU board and find the tty device.

#+BEGIN_SRC sh
sudo dmesg | grep tty
#+END_SRC

Note the tty device in the output.
#+BEGIN_EXAMPLE
cdc_acm 1-3.4.4:1.0: ttyACM0: USB ACM device
#+END_EXAMPLE

When using ~xmk~ for [[#typing][typing]], redirect output to the tty device from the previous step.

#+BEGIN_SRC sh
./src/xmk -k /dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd -m ./src/maps/minidox/60_ansi -s > /dev/ttyACM0
#+END_SRC

To enter the bootloader after flashing the firmware, ~xmk~ can be used to trigger a ~&bootloader~ binding if present in the keymap.

**** native_posix_64 Board
:PROPERTIES:
:TOC:      :include descendants :depth 1 :local depth
:END:

Note: https://github.com/zmkfirmware/zmk/issues/1444.

A Zephyr native posix application running on the host. USB HID is over USB/IP. Communication from ~xmk~ to ZMK is through a pty.

:CONTENTS:
- [[#native_posix_64-board-prerequisites][native_posix_64 Board Prerequisites]]
- [[#native_posix_64-board-setup][native_posix_64 Board Setup]]
:END:

***** native_posix_64 Board Prerequisites

- usbip

***** native_posix_64 Board Setup

Edit [[./zmk-config/native_posix_64.keymap]] to add your keymap. No transform is required.

For local builds, merge https://github.com/zmkfirmware/zmk/pull/1318, ~west update~, and build with board ~native_posix_64~, using the path to [[./zmk-config]] for [[https://zmk.dev/docs/development/build-flash#building-from-zmk-config-folder][ZMK_CONFIG]].

For workflow builds, fork this repo and run the ~Build native_posix_64 board~ workflow.

Load the usbip modules if necessary.

#+BEGIN_SRC sh
sudo modprobe vhci-hcd
#+END_SRC

Execute ~zmk.elf~.

#+BEGIN_SRC sh
zmk.elf
#+END_SRC

Note the pty device in the output.

#+BEGIN_EXAMPLE
UART_0 connected to pseudotty: /dev/pts/18
#+END_EXAMPLE

Find the busid of the usbip server.

#+BEGIN_SRC sh
usbip list -r localhost
#+END_SRC

Note the busid in the output.
#+BEGIN_EXAMPLE
Exportable USB devices
======================
 - localhost
        1-1: OpenMoko, Inc. : unknown product (1d50:615e)
           : /sys/devices/pci0000:00/0000:00:01.2/usb1/1-1
           : (Defined at Interface level) (00/00/00)
           :  0 - Human Interface Device / No Subclass / None (03/00/00)
#+END_EXAMPLE

Attach the usbip client using the busid from the previous step.

#+BEGIN_SRC sh
sudo usbip attach -r localhost -b 1-1
#+END_SRC

When using ~xmk~ for [[#typing][typing]], redirect output to the pty device from the earlier step.

#+BEGIN_SRC sh
./src/xmk -k /dev/input/by-id/usb-SIGMACHIP_USB_Keyboard-event-kbd -m ./src/maps/minidox/60_ansi -s > /dev/pts/18
#+END_SRC

** Related Projects

[[https://qmk.fm/][QMK]] and [[https://zmk.dev/][ZMK]] are firmware for compatible programmable keyboards, and support customisation functions such as remapping, layers, and dual functions keys. 𝑥MK enables QMK and ZMK to be used with any keyboard, so that customisation functions can be used on non-programmable keyboards.

[[https://github.com/kmonad/kmonad][KMonad]] or a [[https://github.com/qmk/qmk_firmware/tree/master/keyboards/converter/usb_usb][QMK USB to USB keyboard protocol converter]] can be used in a similar manner. The main differences are summarised below.

|            | 𝑥MK       | 𝑥MK [[#native_posix_64-board][native]]   | KMonad   | Converter |
|------------+-----------+------------------------------------------+----------+-----------|
| *Keyboard* | any       | any                                      | any      | USB       |
| *OS*       | Linux     | Linux                                    | multiple | any       |
| *Hardware* | MCU board | none                                     | none     | converter |
| *Software* | ~xmk~     | ~xmk~, ~usbip~                           | ~kmonad~ | none      |
| *Keymap*   | QMK, ZMK  | ZMK                                      | KMonad   | QMK       |

𝑥MK can be used with any keymap. [[https://github.com/manna-harbour/miryoku_qmk/tree/miryoku/users/manna-harbour_miryoku#𝑥mk][Miryoku QMK]] and [[https://github.com/manna-harbour/miryoku_zmk#𝑥mk][Miryoku ZMK]] include support for 𝑥MK.
** Discussions and Support

- [[https://github.com/manna-harbour/xmk/discussions/1][𝑥MK Discussions and Support]]

* 

[[https://github.com/manna-harbour][https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/logos/manna-harbour-boa-32.png]]
